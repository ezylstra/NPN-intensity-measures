---
title: "Exploration of intensity data"
date: "`r format(Sys.time(), '%d %B, %Y')`"
author: "Erin Zylstra"
execute: 
  echo: false
  error: false
  warning: false
  message: false
format: 
  html:
    fig-cap-location: top
    page-layout: full
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}

library(dplyr)
library(stringr)
library(lubridate)
library(ggplot2)
library(cowplot)
library(kableExtra)
```

## Overview

Need some introduction to project and sites

```{r setup}

# List of sites
sites <- c("bona", "deju", "srer", "ellen")

# Plant phenophase classes
leaf_classes <- 1:5
flower_classes <- 6:9
fruit_classes <- 10:13

# List files with formatted intensity data
intensity_files <- list.files("npn-data",
                              pattern = "intensity-site",
                              full.names = TRUE)
```

```{r load-filter-data}

# Summarize data available by species, individual, phenophase

for (site in sites) {
  
  sitecap <- str_to_upper(site)
  filename <- intensity_files[grepl(sitecap, intensity_files)]
  si <- read.csv(filename)

  # Remove any true duplicates
  si <- si[!duplicated(si),]
  
  # Occasionally there are two records for a plant-phenophase in one day with 
  # different intensity or status values. Removing these observations too.
  si <- si %>%
    group_by(individual_id, phenophase_id, observation_date) %>%
    mutate(n_obs = n()) %>%
    ungroup() %>%
    filter(n_obs == 1) %>%
    select(-n_obs) %>%
    data.frame()
  
  # Doublecheck that there's only one observation of each plant-phenophase per day
  if (nrow(si) != nrow(distinct(si, individual_id, phenophase_id, observation_date))) {
    warning("There is more than one observation of some plant phenophases at ",
            sitecap, " in a day")
  }
  
  # Calculate the interval between observations of the plant, phenophase
  si <- si %>%
    arrange(common_name, individual_id, phenophase_description, yr, day_of_year)
  
  si$interval_raw <- c(NA, si$day_of_year[2:nrow(si)] - si$day_of_year[1:(nrow(si) - 1)])
  same_ind <- 1 * (si$individual_id[2:nrow(si)] == si$individual_id[1:(nrow(si) - 1)])
  same_php <- 1 * (si$phenophase_id[2:nrow(si)] == si$phenophase_id[1:(nrow(si) - 1)])
  same_yr <- 1 * (si$yr[2:nrow(si)] == si$yr[1:(nrow(si) - 1)])
  si$same_ind <- c(NA, same_ind)
  si$same_php <- c(NA, same_php)
  si$same_yr <- c(NA, same_yr)
  si <- si %>%
    mutate(interval = case_when(
      same_ind == 0 ~ NA,
      same_php == 0 ~ NA,
      same_yr == 0 ~ NA,
      is.na(interval_raw) ~ NA,
      .default = interval_raw
    )) %>%
    select(-c(interval_raw, same_ind, same_php, same_yr))

  assign(paste0("si_", site), si)
}

# Create intensity dataset combined for all sites
si_files <- ls()[ls() %in% paste0("si_", sites)]
si <- do.call(rbind, mget(si_files))
rownames(si) <- NULL
rm(list = si_files)

# Add short site name
si <- si %>%
  mutate(site = str_to_lower(str_sub(site_name, 1, 4))) %>%
  mutate(site = str_replace_all(site, "home", "ellen"))

# Summarize amount and quality of information for each plant, phenophase, year
pl_ph_yr <- si %>%
  group_by(site, common_name, individual_id, phenophase_description, yr) %>%
  summarize(nobs = n(),
            first_obs = min(day_of_year),
            last_obs = max(day_of_year),
            mean_int = round(mean(interval, na.rm = TRUE), 2),
            max_int = ifelse(nobs ==1, NA, max(interval, na.rm = TRUE)),
            n_inphase = sum(phenophase_status),
            n_intvalue = sum(!is.na(intensity_value)),
            prop_inphase = round(n_inphase / nobs, 2),
            prop_intvalue = round(n_intvalue / n_inphase, 2),
            .groups = "keep") %>%
  data.frame()

# For exploring intensity data, we will filter the data:
  # remove plant-php-year combos with no observations in phase
  # remove plant-php-year combos with no observations with intensity values
  # remove plant-php-year combos with < 5 observations
  # remove plant-php-year combos when max interval > 14 days
  # (using 14-day max interval cutoff rather than mean interval mostly removes
  # no. years for Ellen's plants; most now 3-4 years)

# Side note: Checked that individual_id's for plants at NEON sites weren't 
# changing annually like the site_id's do. Luckily, that doesn't seem to be the 
# case, as most plants are monitored for multiple years.

pl_ph_yr <- pl_ph_yr %>%
mutate(remove = case_when(
  n_inphase == 0 ~ 1,
  n_intvalue == 0 ~ 1,
  nobs < 5 ~ 1,
  # mean_int > 14 ~ 1,
  max_int > 14 ~ 1,
  .default = 0
))
si <- si %>%
  left_join(select(pl_ph_yr, individual_id, phenophase_description, yr, remove),
            by = c("individual_id", "phenophase_description", "yr")) %>%
  filter(remove == 0) %>%
  select(-remove)

# Check that there's only one intensity category for each species-phenophase?
  spil <- si %>%
    filter(!is.na(intensity_category_id)) %>%
    distinct(common_name, phenophase_description, intensity_name, 
             intensity_type, intensity_label)
  spl <- si %>%
    distinct(common_name, phenophase_description)
  # setdiff(spl, spil[, 1:2])

# Make intensity midpoints = 0 if status = 0 and add intensity category labels
si <- si %>%
  mutate(intensity_midpoint = ifelse(phenophase_status == 0, 
                                     0, intensity_midpoint)) %>%
  select(-c(intensity_name, intensity_type, intensity_label)) %>%
  left_join(spil, by = c("common_name", "phenophase_description"))
```

```{r summarize-data}

# Site-species summaries
site_spp <- si %>%
  mutate(php_type = case_when(
    class_id %in% leaf_classes ~ "Leaves",
    class_id %in% flower_classes ~ "Flowers",
    class_id %in% fruit_classes ~ "Fruit"
  )) %>%
  group_by(site, common_name, species_functional_type) %>%
  summarize(n_plants = n_distinct(individual_id),
            first_yr = min(yr),
            last_yr = max(yr),
            n_yrs = n_distinct(yr),
            n_php = n_distinct(phenophase_id),
            leaf_php = n_distinct(phenophase_id[php_type == "Leaves"]),
            flower_php = n_distinct(phenophase_id[php_type == "Flowers"]),
            fruit_php = n_distinct(phenophase_id[php_type == "Fruit"]),
            .groups = "keep") %>%
  arrange(site, species_functional_type, desc(n_plants), desc(n_yrs),
          desc(n_php)) %>%
  data.frame()

# Identify which species to focus on at Ellen's site: 1/2 species per functional
# type, prioritizing no. plants, no. years, and then no. phenophases
site_spp <- site_spp %>%
  group_by(site, species_functional_type) %>%
  mutate(priority = row_number()) %>%
  # Keep all species that have at least 3 plants
  mutate(priority = ifelse(n_plants > 2, 1, priority)) %>%
  data.frame()

# Remove any species that are lower priority
si <- si %>%
  left_join(select(site_spp, site, common_name, priority),
            by = c("site", "common_name")) %>%
  filter(priority == 1) %>%
  select(-priority)
site_spp <- site_spp %>%
  filter(priority == 1) %>%
  select(-priority)
  
# Site-species-phenophase summary
site_spp_ph <- si %>%
  group_by(site, common_name, phenophase_description) %>%
  summarize(n_plants = n_distinct(individual_id),
            first_yr = min(yr),
            last_yr = max(yr),
            n_yrs = n_distinct(yr),
            n_obs = n(),
            mean_int = round(mean(interval, na.rm = TRUE), 2),
            max_int = max(interval, na.rm = TRUE),
            .groups = "keep") %>%
  mutate(obs_per_yr = round(n_obs / n_yrs, 1)) %>%
  relocate(obs_per_yr, .after = "n_obs") %>%
  data.frame()

# # Site-plant-phenophase-year summary (for filtered observations)
# si_keep <- si %>%
#   distinct(individual_id, phenophase_description, yr) %>%
#   mutate(keep = 1)
# pl_ph_yr <- pl_ph_yr %>%
#   left_join(si_keep, by = c("individual_id", "phenophase_description", "yr")) %>%
#   filter(!is.na(keep)) %>%
#   select(-c(keep, remove))
# 
# # Proportion of plant-phenophase-years when all positive phenophase observations
# # had an intensity value
# sum(pl_ph_yr$prop_intvalue == 1) / nrow(pl_ph_yr) # >0.99
```

```{r tbl-site-spp}
#| tbl-cap: Amount of filtered data available for each species at each site.

site_spp_t <- site_spp %>%
  mutate(site = str_to_upper(site),
         yr_range = paste(first_yr, "-", last_yr),
         phps = paste0(n_php, " (", leaf_php, ",", flower_php, 
                       ",", fruit_php, ")")) %>%
  relocate(yr_range, .before = "n_yrs") %>%
  select(-c(first_yr, last_yr, n_php, leaf_php, flower_php, fruit_php)) %>%
  kbl(col.names = c("Site", "Species", "Functional group", "No. plants",
                    "Year range", "No. years", "No. phenophases (leaf, flower, fruit)"),
      align = c(rep("r", 3), rep("c", 4))) %>%
  kable_styling(full_width = FALSE, font_size = 11)
site_spp_t
```

```{r exclude-some-intensity-cats}

# Create table summarizing amount of information per intensity category
intensity_cats <- si %>%
  group_by(class_id, intensity_label, intensity_type) %>%
  summarize(n = n(),
            n_spp = n_distinct(common_name),
            n_plants = n_distinct(individual_id),
            n_yrs = n_distinct(yr),
            values = paste(sort(unique(intensity_midpoint)), collapse = ", "),
            .groups = "keep") %>%
  data.frame()

# Identify categories that we want to exclude because:
  # Only one intensity value represented in dataset
  # Fewer than 50 observations across species, plants, and years
intensity_cats <- intensity_cats %>%
  mutate(exclude = case_when(
    str_detect(values, ", ", negate = TRUE) ~ 1, 
    n < 50 ~ 1, 
    .default = 0
  ))

# Remove categories from dataset and intensity category table
si <- si %>%
  left_join(select(intensity_cats, intensity_label, exclude), 
            by = "intensity_label") %>%
  filter(exclude == 0) %>%
  select(-exclude)
intensity_cats <- intensity_cats %>%
  filter(exclude == 0) %>%
  select(-exclude)

# Log transform numeric intensity values 
si <- si %>%
  mutate(intensity_midpoint_no0 = ifelse(intensity_midpoint == 0, 
                                         0.1, intensity_midpoint)) %>%
  mutate(intensity_midpoint_log = ifelse(intensity_type == "number", 
                                         log(intensity_midpoint_no0), NA))

# Summarize data available for each plant, phenophase, and year (in part
# to figure out what data to include in GAMs). Recreating pl_ph_yr...
  # Going to use rle(phenophase_status) to understand the patterns:
    # length(rle$values) = number of 0/1 status sequences
    # first(rle$values) = state at first observation
    # last(rle$values) = state at last observation
pl_ph_yr <- si %>%
  arrange(site, individual_id, phenophase_id, observation_date) %>%
  group_by(site, common_name, individual_id, phenophase_description,
           intensity_label, class_id, yr) %>%
  summarize(nobs = n(),
            first_obs = min(day_of_year),
            last_obs = max(day_of_year),
            mean_int = round(mean(interval, na.rm = TRUE), 2),
            max_int = ifelse(nobs ==1, NA, max(interval, na.rm = TRUE)),
            n_inphase = sum(phenophase_status),
            # n_intvalue = sum(!is.na(intensity_value)),
            prop_inphase = round(n_inphase / nobs, 2),
            # prop_intvalue = round(n_intvalue / n_inphase, 2),
            n_states = length(rle(phenophase_status)$values),
            first_status = first(rle(phenophase_status)$values),
            last_status = last(rle(phenophase_status)$values),
            .groups = "keep") %>%
  data.frame()

# Summarize across species
pl_ph_yr %>%
  group_by(common_name) %>%
  summarize(n = n(),
            n_status0 = sum(prop_inphase < 1),
            prop_status0 = round(n_status0 / n, 2),
            n_states_mn = round(mean(n_states), 2),
            n_states_min = min(n_states),
            n_states_max = max(n_states),
            prop_start0 = round(sum(first_status == 0) / n, 2),
            prop_end0 = round(sum(last_status == 0) / n, 2), 
            prop_00 = round(sum(first_status == 0 & last_status == 0) / n, 2),
            .groups = "keep") %>%
  data.frame() %>%
  arrange(desc(n))

# Summarize across phenophases
pl_ph_yr %>%
  group_by(class_id, phenophase_description, intensity_label) %>%
  summarize(n = n(),
            n_status0 = sum(prop_inphase < 1),
            prop_status0 = round(n_status0 / n, 2),
            n_states_mn = round(mean(n_states), 2),
            n_states_min = min(n_states),
            n_states_max = max(n_states),
            prop_start0 = round(sum(first_status == 0) / n, 2),
            prop_end0 = round(sum(last_status == 0) / n, 2), 
            prop_00 = round(sum(first_status == 0 & last_status == 0) / n, 2),
            .groups = "keep") %>%
  data.frame()
# Simpler...
php_summary <- pl_ph_yr %>%
  group_by(class_id, phenophase_description, intensity_label) %>%
  summarize(n = n(),
            n_states_mn = round(mean(n_states), 2),
            n_states_max = max(n_states),
            prop_00 = round(sum(first_status == 0 & last_status == 0) / n, 2),
            .groups = "keep") %>%
  data.frame()

# Look more closely at some phenophases, where mean number of status series
# varies a lot from 3 (ideally 0-1-0) and the proportion of plant-php-yrs
# that start and end out of phase is << 1
intensities <- php_summary %>%
  filter(prop_00 < 0.70) %>%
  pull(intensity_label)
# Young leaves (tree/shrub) - no.
# Leaves - canopy fullness (%)
# Leaves (sedges) - greeness (%)
# Colored leaves - canopy color (%)
# Fruits - no.
# Ripe fruits (%)

# Look at these intensity curves in turn
intens <- intensities[6]
  
  si_int <- filter(si, intensity_label == intens)
  spps <- unique(si_int$common_name)
  
  # Remove observations where phenophase status is 1, but intensity value wasn't 
  # provided (this creates breaks in plotted lines)
  si_int <- filter(si_int, !is.na(intensity_midpoint))
  
  # Plot logged values for numeric intensity categories
  if (si_int$intensity_type[1] == "number") {
    si_int <- si_int %>%
      mutate(yaxis = intensity_midpoint_log)
  } else {
    si_int <- si_int %>%
      mutate(yaxis = intensity_midpoint)
  }

  for (spp in spps) {
  
    si_int_spp <- filter(si_int, common_name == spp)

    ylab <- ifelse(si_int$intensity_type[1] == "number",
                   paste0("log(", str_to_lower(si_int$intensity_label[1]), ")"),
                   si_int$intensity_label[1])
    
    ics <- ggplot(si_int_spp, aes(x = day_of_year, y = yaxis)) +
      geom_line(aes(color = factor(individual_id))) +
      facet_grid(yr ~ .) +
      theme(legend.position = "none") +
      labs(title = paste0(str_to_sentence(spp), ",  ", intens),
           y = ylab, x = "Day of year")
    
    print(ics)
  }
  
# Young leaves - no.
  # velvet mesquite: 2016 didn't start till late, but other years look good with multiple humps
  # desert zinnia: good, just often 1-1 to start/end; lots more plants in 2017-2019.
  # creosote bush: 2016 didn't start till late, doesn't always have 0-0 to start-end
  # mountain laurel: good
  
# Leaves - % canopy fullness
  # velvet mesquite: good, but not 2016
  # desert zinnia: good
  # sugar maple: good
  # forsythia: good
  # dwarf birch: 2016 and 2020 started late, but other years look good
  # quaking aspen: 2017 and 2020 started late, but other years look good

# Leaves (sedges) - % greenness
  # Pennsylvania sedge: look good, just always has some green leaves
  
# Colored leaves - % canopy color 
  # velvet mesquite: 2016 started late, otherwise ok. Always low %, and often not 0-0 start-end
  # desert zinnia: 2016 started late, otherwise ok. Usually low % and often not 0-0 start-end
  # sugar maple: good
  # forsythia: good
  # dwarf birch: 2016 late start (2020 did too, but didn't matter for this phenophase)
  # quaking aspen: good. late start in 2017 and 2020 never mattered. 
  
# Fruits - no. ##### most questionable #####
  # velvet mesquite: 1 plant, 1 year so no help.
  # creosote bush: 6 plants & 1 year. Not sure these curves are helpful ########
  # sugar maple: 2 plants, 3 years. ok
  # mountain laurel: 1 plant, 3 years. Not sure these curves are helpful since
    # 2 end year with fruits and aren't monitored for long time after
  # Virginia strawberry: 1 plant, 3 years. good
  
# Ripe fruit % ##### most questionable #####
  # creosote bush: 6 plants, 1 year. Not sure it's helpful, ends at 1 but starts late at 0
  # sugar maple: 2 plants, 2 years. ok
  # mountain laurel: 1 plant, 1 year, ends at 1. no help
  # Virginia strawberry: 1 plant, 1 year so no help
  # Pennsylvania sedge: 1 plant, 3 years. good ##### exception?

# UPSHOT: 
# So maybe exclude the fruit phenophases for now?  Very little data to go on and 
# the patterns are more difficult to parse out
  
# NEON sites had some years where monitoring started late (but note that this 
# may not matter for phenophases that occur later in the year)
  # BONA [quaking aspen]: 2017 and 2020 
  # DEJU [dwarf birch]: 2016 and 2020
  # SRER [velvet mesquite, creosote bush, desert zinnia]: 2016
  
# Use a rule to exclude any species-phenophase combination where there's only one 
# plant-year of data (in case there are any beyond those in the fruit categories)
```

```{r GAMs}


```

```{r status-intensity-curves}


```

```{r derived-metrics}


```
